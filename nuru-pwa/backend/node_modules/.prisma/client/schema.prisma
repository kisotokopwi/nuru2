generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPERVISOR
  ADMIN
}

enum ServiceType {
  WAREHOUSE
  CARGO
  FERTILIZER
  EQUIPMENT
  TRANSPORT
}

enum InvoiceType {
  CLIENT
  INTERNAL
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      Role
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  supervisorReports DailyReport[]  @relation("SupervisorDailyReports")
  auditLogs         AuditLog[]
  sites             UsersOnSites[]
}

model Client {
  id             String   @id @default(cuid())
  name           String
  email          String?  @unique
  phone          String?
  address        String?
  billingDetails Json?
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  projects Project[]
}

model Project {
  id        String    @id @default(cuid())
  clientId  String
  name      String
  startDate DateTime?
  endDate   DateTime?
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  client Client @relation(fields: [clientId], references: [id])
  sites  Site[]

  @@index([clientId])
}

model Site {
  id          String      @id @default(cuid())
  projectId   String
  name        String
  serviceType ServiceType
  location    String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  project      Project        @relation(fields: [projectId], references: [id])
  workerTypes  WorkerType[]
  dailyReports DailyReport[]
  users        UsersOnSites[]

  @@index([projectId])
  @@index([serviceType])
}

model WorkerType {
  id                 String   @id @default(cuid())
  siteId             String
  name               String
  dailyRate          Decimal  @db.Decimal(10, 2)
  overtimeMultiplier Decimal  @db.Decimal(5, 2)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  site          Site          @relation(fields: [siteId], references: [id])
  workerEntries WorkerEntry[]

  @@index([siteId])
}

model UsersOnSites {
  userId     String
  siteId     String
  assignedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  site Site @relation(fields: [siteId], references: [id])

  @@id([userId, siteId])
  @@index([siteId])
}

model DailyReport {
  id           String    @id @default(cuid())
  supervisorId String
  siteId       String
  workDate     DateTime
  submittedAt  DateTime?
  lockedAt     DateTime?
  totalAmount  Decimal   @db.Decimal(12, 2)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  supervisor User          @relation("SupervisorDailyReports", fields: [supervisorId], references: [id])
  site       Site          @relation(fields: [siteId], references: [id])
  entries    WorkerEntry[]
  invoices   Invoice[]

  @@index([supervisorId])
  @@index([siteId])
  @@index([workDate])
}

model WorkerEntry {
  id                String   @id @default(cuid())
  dailyReportId     String
  workerTypeId      String
  count             Int
  hours             Int      @default(0)
  overtimeHours     Int      @default(0)
  productionMetrics Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  dailyReport DailyReport @relation(fields: [dailyReportId], references: [id])
  workerType  WorkerType  @relation(fields: [workerTypeId], references: [id])

  @@index([dailyReportId])
  @@index([workerTypeId])
}

model Invoice {
  id            String      @id @default(cuid())
  dailyReportId String
  type          InvoiceType
  referenceId   String?
  amount        Decimal     @db.Decimal(12, 2)
  generatedAt   DateTime    @default(now())
  pdfPath       String?

  dailyReport DailyReport @relation(fields: [dailyReportId], references: [id])

  @@index([dailyReportId])
  @@index([type])
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  tableName String
  recordId  String
  oldValues Json?
  newValues Json?
  reason    String?
  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([tableName])
  @@index([recordId])
}
