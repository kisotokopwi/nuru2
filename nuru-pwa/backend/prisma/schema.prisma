// Nuru Company PWA Database Schema
// Multi-service worker supervision with dual-invoice system

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      UserRole @default(SUPERVISOR)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  supervisorSites UserSite[]
  dailyReports    DailyReport[]
  auditLogs       AuditLog[]

  @@map("users")
}

enum UserRole {
  SUPERVISOR
  ADMIN
  MANAGER
}

// Client Management
model Client {
  id             String  @id @default(uuid())
  name           String
  email          String? @unique
  phone          String?
  address        String?
  billingDetails Json? // Flexible billing information
  isActive       Boolean @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  projects Project[]

  @@map("clients")
}

// Project Management
model Project {
  id        String    @id @default(uuid())
  clientId  String
  name      String
  startDate DateTime
  endDate   DateTime?
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  client Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  sites  Site[]

  @@index([clientId])
  @@map("projects")
}

// Site Management
model Site {
  id          String      @id @default(uuid())
  projectId   String
  name        String
  serviceType ServiceType
  location    String
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  project     Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  workerTypes WorkerType[]
  userSites   UserSite[]
  dailyReports DailyReport[]

  @@index([projectId])
  @@index([serviceType])
  @@map("sites")
}

enum ServiceType {
  WAREHOUSE
  CARGO
  FERTILIZER
  EQUIPMENT
  TRANSPORT
  MANPOWER
}

// Worker Type Configuration
model WorkerType {
  id                 String  @id @default(uuid())
  siteId             String
  name               String
  dailyRate          Decimal @db.Decimal(10, 2)
  overtimeMultiplier Decimal @db.Decimal(3, 2) @default(1.5)
  isActive           Boolean @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  site          Site           @relation(fields: [siteId], references: [id], onDelete: Cascade)
  workerEntries WorkerEntry[]

  @@index([siteId])
  @@map("worker_types")
}

// User-Site Assignment (Supervisor assignments)
model UserSite {
  id       String @id @default(uuid())
  userId   String
  siteId   String
  assignedAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  site Site @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@unique([userId, siteId])
  @@index([userId])
  @@index([siteId])
  @@map("user_sites")
}

// Daily Reports
model DailyReport {
  id           String    @id @default(uuid())
  supervisorId String
  siteId       String
  workDate     DateTime  @db.Date
  submittedAt  DateTime  @default(now())
  lockedAt     DateTime?
  totalAmount  Decimal   @db.Decimal(12, 2) @default(0)
  notes        String?
  isLocked     Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  supervisor    User           @relation(fields: [supervisorId], references: [id])
  site          Site           @relation(fields: [siteId], references: [id])
  workerEntries WorkerEntry[]
  invoices      Invoice[]

  @@unique([siteId, workDate])
  @@index([supervisorId])
  @@index([siteId])
  @@index([workDate])
  @@map("daily_reports")
}

// Worker Entries (Daily work records)
model WorkerEntry {
  id                String  @id @default(uuid())
  dailyReportId     String
  workerTypeId      String
  count             Int     @default(0)
  hours             Decimal @db.Decimal(4, 2) @default(0)
  overtimeHours     Decimal @db.Decimal(4, 2) @default(0)
  productionMetrics Json? // Flexible metrics (bags filled, cargo moved, etc.)
  subtotal          Decimal @db.Decimal(10, 2) @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  dailyReport DailyReport @relation(fields: [dailyReportId], references: [id], onDelete: Cascade)
  workerType  WorkerType  @relation(fields: [workerTypeId], references: [id])

  @@index([dailyReportId])
  @@index([workerTypeId])
  @@map("worker_entries")
}

// Dual Invoice System
model Invoice {
  id            String      @id @default(uuid())
  dailyReportId String
  type          InvoiceType
  referenceId   String      @unique // Unique invoice number
  amount        Decimal     @db.Decimal(12, 2)
  generatedAt   DateTime    @default(now())
  pdfPath       String?
  status        InvoiceStatus @default(GENERATED)
  clientData    Json? // Snapshot of client data at generation time
  metadata      Json? // Additional invoice metadata
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  dailyReport DailyReport @relation(fields: [dailyReportId], references: [id])

  @@index([dailyReportId])
  @@index([type])
  @@index([referenceId])
  @@map("invoices")
}

enum InvoiceType {
  CLIENT    // Invoice sent to client
  INTERNAL  // Internal company invoice
}

enum InvoiceStatus {
  GENERATED
  SENT
  PAID
  CANCELLED
}

// Comprehensive Audit Trail
model AuditLog {
  id         String   @id @default(uuid())
  userId     String?
  action     String   // CREATE, UPDATE, DELETE, LOGIN, etc.
  tableName  String
  recordId   String?
  oldValues  Json?
  newValues  Json?
  reason     String?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())

  // Relations
  user User? @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([tableName])
  @@index([recordId])
  @@index([createdAt])
  @@map("audit_logs")
}

// System Configuration
model SystemConfig {
  id        String   @id @default(uuid())
  key       String   @unique
  value     String
  category  String   @default("general")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([category])
  @@map("system_config")
}

// Offline Sync Management
model SyncQueue {
  id        String     @id @default(uuid())
  userId    String
  operation String     // CREATE, UPDATE, DELETE
  tableName String
  recordId  String?
  data      Json
  status    SyncStatus @default(PENDING)
  attempts  Int        @default(0)
  lastError String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@map("sync_queue")
}

enum SyncStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

// File Management for PDFs and attachments
model FileStorage {
  id           String   @id @default(uuid())
  fileName     String
  originalName String
  mimeType     String
  size         Int
  path         String
  category     String   @default("general") // invoice, report, etc.
  relatedId    String? // ID of related record
  uploadedBy   String?
  createdAt    DateTime @default(now())

  @@index([category])
  @@index([relatedId])
  @@map("file_storage")
}