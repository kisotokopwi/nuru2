import { PDFDocument, StandardFonts, rgb } from 'pdf-lib';
import QRCode from 'qrcode';

async function addHeader(page, title, ref, logoText = 'NURU CO.') {
  const { width } = page.getSize();
  const font = await page.doc.embedFont(StandardFonts.HelveticaBold);
  page.drawText(logoText, { x: 40, y: 780, size: 16, font, color: rgb(0, 0.45, 0.4) });
  page.drawText(title, { x: 40, y: 760, size: 14, font });
  page.drawText(`Reference: ${ref}`, { x: width - 240, y: 780, size: 10, font });
}

async function addFooter(page) {
  const font = await page.doc.embedFont(StandardFonts.Helvetica);
  page.drawText('Generated by Nuru PWA • PDF/A-like', { x: 40, y: 30, size: 9, font, color: rgb(0.2, 0.2, 0.2) });
}

async function embedQr(page, url) {
  const dataUrl = await QRCode.toDataURL(url, { margin: 0, scale: 4 });
  const pngData = Buffer.from(dataUrl.split(',')[1], 'base64');
  const png = await page.doc.embedPng(pngData);
  page.drawImage(png, { x: page.getWidth() - 120, y: 700, width: 80, height: 80 });
}

export async function generateClientInvoicePdf({ reference, client, site, report, entries }) {
  const doc = await PDFDocument.create();
  const page = doc.addPage();
  page.doc = doc;
  await addHeader(page, 'Client Invoice', reference);
  await embedQr(page, `${process.env.PUBLIC_BASE_URL || 'http://localhost:4000'}/invoices/verify/${reference}`);

  const font = await doc.embedFont(StandardFonts.Helvetica);
  let y = 720;
  page.drawText(`Client: ${client.name}`, { x: 40, y: y, size: 12, font }); y -= 16;
  page.drawText(`Site: ${site.name} (${site.serviceType})`, { x: 40, y: y, size: 12, font }); y -= 16;
  page.drawText(`Work Date: ${new Date(report.workDate).toDateString()}`, { x: 40, y: y, size: 12, font }); y -= 24;
  page.drawText('Worker Type Summary', { x: 40, y: y, size: 12, font }); y -= 14;

  entries.forEach((e) => {
    page.drawText(`• ${e.workerType.name}: ${e.count} workers, ${e.hours}h (+${e.overtimeHours} OT)`, { x: 48, y: y, size: 11, font });
    y -= 14;
  });
  y -= 10;
  page.drawText(`Total Amount Due: $${Number(report.totalAmount).toFixed(2)}`, { x: 40, y: y, size: 12, font });
  await addFooter(page);
  return Buffer.from(await doc.save());
}

export async function generateInternalInvoicePdf({ reference, client, site, report, entries, audit }) {
  const doc = await PDFDocument.create();
  const page = doc.addPage();
  page.doc = doc;
  await addHeader(page, 'Internal Invoice', reference);
  await embedQr(page, `${process.env.PUBLIC_BASE_URL || 'http://localhost:4000'}/invoices/verify/${reference}`);

  const font = await doc.embedFont(StandardFonts.Helvetica);
  let y = 720;
  page.drawText(`Client: ${client.name}`, { x: 40, y: y, size: 12, font }); y -= 16;
  page.drawText(`Site: ${site.name} (${site.serviceType})`, { x: 40, y: y, size: 12, font }); y -= 16;
  page.drawText(`Supervisor: ${audit.supervisorEmail}`, { x: 40, y: y, size: 12, font }); y -= 16;
  page.drawText(`Submitted: ${new Date(report.submittedAt).toLocaleString()}`, { x: 40, y: y, size: 12, font }); y -= 24;

  page.drawText('Payment Breakdown', { x: 40, y: y, size: 12, font }); y -= 14;
  entries.forEach((e) => {
    page.drawText(`• ${e.workerType.name}: ${e.count} workers x ${e.hours}h (+${e.overtimeHours} OT)`, { x: 48, y: y, size: 11, font });
    y -= 14;
  });
  y -= 10;
  page.drawText(`Total: $${Number(report.totalAmount).toFixed(2)}`, { x: 40, y: y, size: 12, font }); y -= 20;

  page.drawText('Audit Trail:', { x: 40, y: y, size: 12, font }); y -= 14;
  audit.events.forEach((ev) => {
    page.drawText(`• ${ev.action} at ${new Date(ev.createdAt).toLocaleString()}`, { x: 48, y: y, size: 10, font });
    y -= 12;
  });

  await addFooter(page);
  return Buffer.from(await doc.save());
}

